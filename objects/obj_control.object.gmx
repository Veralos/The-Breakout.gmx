<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = 1;
message = 0;
hurt = false;
paused = false;

hold_dir = 0;
hold_spd = 0;

view_xview[0] = obj_player.x - view_wview[0] / 2;
view_yview[0] = obj_player.y - view_hview[0] / 2;

instance_create(0, 0, obj_background);
if (instance_number(obj_first_room) &lt; 1) {
    instance_create(obj_player.x, obj_player.y, obj_start_stairs);
}

if (audio_is_playing(mus_main)) {
    audio_resume_sound(mus_main);
}
else {
    audio_play_sound(mus_main, 0, true);
}

menu_pause = ds_list_create();
scr_menu_item(menu_pause, "Continue", scr_continue);
scr_menu_item(menu_pause, "Restart", scr_restart);
scr_menu_item(menu_pause, "Exit", scr_exit);

selected = 0;

animate = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animate += 0.01;
if (animate &gt; 1) {
    animate = 0;
}

if (message &gt; 0) {
    message--;
}

room_speed = 60;

if (instance_number(obj_player) &gt; 0) {
    var hborder = 16;
    var vborder = 16;
    var vx = view_xview[0];
    var vy = view_yview[0];
    var vw = view_wview[0];
    var vh = view_hview[0];
    
    if (obj_player.x &gt; vx + vw / 2 + hborder) {
        view_xview[0] = lerp(view_xview[0], obj_player.x - vw / 2 - hborder, 0.5);
    }
    if (obj_player.x &lt; vx + vw / 2 - hborder) {
        view_xview[0] = lerp(view_xview[0], obj_player.x - vw / 2 + hborder, 0.5);
    }
    if (obj_player.y &gt; vy + vh / 2 + vborder) {
        view_yview[0] = lerp(view_yview[0], obj_player.y - vh / 2 - vborder, 0.5);
    }
    if (obj_player.y &lt; vy + vh / 2 - vborder) {
        view_yview[0] = lerp(view_yview[0], obj_player.y - vh / 2 + vborder, 0.5);
    }
    
    if (keyboard_check_pressed(vk_escape)) {
        //audio_stop_sound(mus_main);
        //audio_play_sound(snd_back, 0, false);
        //room_goto(rm_title_2);
        audio_play_sound(snd_back, 0, false);
        paused = !paused;
        if (paused) {
            audio_pause_sound(mus_main);
            hold_spd = obj_bad.speed;
            hold_dir = obj_bad.direction;
        }
        else {
            audio_resume_sound(mus_main);
            obj_bad.speed = hold_spd;
            obj_bad.direction = hold_dir;
        }
    }
    else if (hp &lt;= 0) {
        audio_pause_sound(mus_main);
        with (obj_player) {
            instance_destroy();
        }
        alarm[0] = 60;
    }
}

if (paused) {
    if (obj_input.select_up_pressed) {
        audio_play_sound(snd_select, 0, false);
        selected--;
    }
    if (obj_input.select_down_pressed) {
        audio_play_sound(snd_select, 0, false);
        selected++;
    }
    
    if (selected &gt; ds_list_size(menu_pause) - 1) {
        selected = 0;
    }
    if (selected &lt; 0) {
        selected = ds_list_size(menu_pause) - 1;
    }
    
    if (obj_input.confirm_pressed) {
        audio_play_sound(snd_confirm, 0, false);
        item = ds_list_find_value(menu_pause, selected);
        script_execute(item[1]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (message &gt; 0) {
    var text = "You still have a prisoner left to free";
    if (instance_number(obj_elf) &gt; 1) {
        text = "You still have " + string(instance_number(obj_elf)) + " prisoners left to free"
    }

    draw_set_font(fnt_main);
    draw_set_halign(fa_middle);
    draw_set_valign(fa_middle);
    draw_set_color(c_white);
    draw_text(
        view_xview[0] + view_wview[0] / 2, 
        view_yview[0] + view_hview[0] * (3 / 4),
        text
    )
}

if (hurt) {
    draw_set_color(c_red);
    draw_set_alpha(0.5);
    draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false);
    draw_set_alpha(1);
    hurt = false;
}

if (paused) {
    draw_set_color(c_black);
    draw_set_alpha(0.75);
    draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
    
    var anim = sin(animate * 2 * pi);
    
    draw_set_font(fnt_end);
    
    draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + 64, "Paused", 1 + 0.02 * anim, 1 + 0.02 * anim, 0);
    
    draw_set_font(fnt_main);
    
    var item;
    for (var i = 0; i &lt; ds_list_size(menu_pause); i++) {
        item = ds_list_find_value(menu_pause, i);
        draw_text(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 + i * 40, item[0]);
        if (i == selected) {
            draw_text(view_xview[0] + view_wview[0] / 2 - 52 + 2 * anim, view_yview[0] + view_hview[0] / 2 + i * 40, "&gt;");
            draw_text(view_xview[0] + view_wview[0] / 2 + 52 - 2 * anim, view_yview[0] + view_hview[0] / 2 + i * 40, "&lt;");
        }
    }
}

draw_set_color(c_red);
draw_rectangle(
view_xview[0] + 8, 
view_yview[0] + 8, 
view_xview[0] + 8 + hp * (view_wview[0] - 16),
view_yview[0] + 16,
false
);

draw_set_color(c_white);
draw_rectangle(
view_xview[0] + 8, 
view_yview[0] + 8, 
view_xview[0] + 8 + 1 * (view_wview[0] - 16),
view_yview[0] + 16,
true
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
